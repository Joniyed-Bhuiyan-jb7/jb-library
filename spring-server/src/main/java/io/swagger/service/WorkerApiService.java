package io.swagger.service;import io.swagger.exception.ResourceAlreadyExistsException;import io.swagger.exception.ResourceDoesNotExistsException;import io.swagger.model.Member;import io.swagger.model.Worker;import io.swagger.repository.MemberApiRepository;import io.swagger.repository.WorkerApiRepository;import org.hibernate.jdbc.Work;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class WorkerApiService {    @Autowired    private WorkerApiRepository workerApiRepository;    public Worker addWorker(Worker body) throws ResourceAlreadyExistsException {        if(!workerApiRepository.exists(body.getWorkerId())){            return workerApiRepository.save(body);        }        else{            throw new ResourceAlreadyExistsException(body.getWorkerId());        }    }    public void delete(String id) throws ResourceDoesNotExistsException {        if(workerApiRepository.exists(id)){            workerApiRepository.delete(id);        }else{            throw new ResourceDoesNotExistsException(id);        }    }    public List<Worker> getAllWorker() throws ResourceDoesNotExistsException {        List<Worker> workerList = new ArrayList<>();        workerApiRepository.findAll().forEach(workerList::add);        if(!workerList.isEmpty()){            return workerList;        }else{            throw new ResourceDoesNotExistsException("empty");        }    }    public Worker getWorkerById(String id) throws ResourceDoesNotExistsException {        if(workerApiRepository.exists(id)){            return workerApiRepository.findOne(id);        }else{            throw new ResourceDoesNotExistsException("book not found");        }    }    public void update(Worker body) throws ResourceDoesNotExistsException {        if(workerApiRepository.exists(body.getWorkerId())){            workerApiRepository.delete(body.getWorkerId());            workerApiRepository.save(body);        }else{            throw new ResourceDoesNotExistsException("no content");        }    }    public List<Worker> getWorkerByName(String name) throws ResourceDoesNotExistsException {        List<Worker> byName = new ArrayList<>();        workerApiRepository.findByName(name).forEach(byName::add);        if(!byName.isEmpty()){            return byName;        }else{            throw new ResourceDoesNotExistsException(name);        }    }}