package io.swagger.service;import io.swagger.exception.ResourceAlreadyExistsException;import io.swagger.exception.ResourceDoesNotExistsException;import io.swagger.model.Member;import io.swagger.model.Publisher;import io.swagger.repository.MemberApiRepository;import io.swagger.repository.PublisherApiRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class PublisherApiService {    @Autowired    private PublisherApiRepository publisherApiRepository;    public Publisher addPublisher(Publisher body) throws ResourceAlreadyExistsException {        if(!publisherApiRepository.exists(body.getPublisherId())){            return publisherApiRepository.save(body);        }        else{            throw new ResourceAlreadyExistsException(body.getPublisherId());        }    }    public void delete(String id) throws ResourceDoesNotExistsException {        if(publisherApiRepository.exists(id)){            publisherApiRepository.delete(id);        }else{            throw new ResourceDoesNotExistsException(id);        }    }    public List<Publisher> getAllPublisher() throws ResourceDoesNotExistsException {        List<Publisher> publisherList = new ArrayList<>();        publisherApiRepository.findAll().forEach(publisherList::add);        if(!publisherList.isEmpty()){            return publisherList;        }else{            throw new ResourceDoesNotExistsException("empty");        }    }    public Publisher getPublisherById(String id) throws ResourceDoesNotExistsException {        if(publisherApiRepository.exists(id)){            return publisherApiRepository.findOne(id);        }else{            throw new ResourceDoesNotExistsException("book not found");        }    }    public void update(Publisher body) throws ResourceDoesNotExistsException {        if(publisherApiRepository.exists(body.getPublisherId())){            publisherApiRepository.delete(body.getPublisherId());            publisherApiRepository.save(body);        }else{            throw new ResourceDoesNotExistsException("no content");        }    }}