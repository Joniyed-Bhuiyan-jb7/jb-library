package io.swagger.service;import io.swagger.exception.ResourceAlreadyExistsException;import io.swagger.exception.ResourceDoesNotExistsException;import io.swagger.model.Book;import io.swagger.model.Member;import io.swagger.repository.MemberApiRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;@Servicepublic class MemberApiService {    @Autowired    private MemberApiRepository memberApiRepository;    public Member addMember(Member body) throws ResourceAlreadyExistsException {        if(!memberApiRepository.exists(body.getUsername())){            return memberApiRepository.save(body);        }        else{            throw new ResourceAlreadyExistsException(body.getUsername());        }    }    public void delete(String username) throws ResourceDoesNotExistsException {        if(memberApiRepository.exists(username)){            memberApiRepository.delete(username);        }else{            throw new ResourceDoesNotExistsException(username);        }    }    public List<Member> geAllMember() throws ResourceDoesNotExistsException {        List<Member> memberList = new ArrayList<>();        memberApiRepository.findAll().forEach(memberList::add);        if(!memberList.isEmpty()){            return memberList;        }else{            throw new ResourceDoesNotExistsException("empty");        }    }    public Member getMemberByUsername(String username) throws ResourceDoesNotExistsException {        if(memberApiRepository.exists(username)){            return memberApiRepository.findOne(username);        }else{            throw new ResourceDoesNotExistsException("book not found");        }    }    public void update(Member body) throws ResourceDoesNotExistsException {        if(memberApiRepository.exists(body.getUsername())){            memberApiRepository.delete(body.getUsername());            memberApiRepository.save(body);        }else{            throw new ResourceDoesNotExistsException("no content");        }    }    public List<Member> getMemberByName(String name) throws ResourceDoesNotExistsException {        List<Member> byName = new ArrayList<>();        memberApiRepository.findByName(name).forEach(byName::add);        if(!byName.isEmpty()){            return byName;        }else{            throw new ResourceDoesNotExistsException(name);        }    }}