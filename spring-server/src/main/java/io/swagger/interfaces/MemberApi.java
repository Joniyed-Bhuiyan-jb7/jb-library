/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.interfaces;

import io.swagger.model.Member;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-10T06:19:32.249Z")

@Api(value = "member", description = "the member API")
@RequestMapping()
public interface MemberApi {

    @ApiOperation(value = "Add new member information", nickname = "addmember", notes = "", tags={ "member", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/member",
        produces = {"application/json" },
        consumes = { "application/json"},
        method = RequestMethod.POST)
    ResponseEntity<Void> addmember(@ApiParam(value = "member object that needs to be added to the store" ,required=true )  @Valid @RequestBody Member body);


    @ApiOperation(value = "Deletes a member", nickname = "deletemember", notes = "", tags={ "member", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "member not found") })
    @RequestMapping(value = "/member/{id}",
        produces = {"application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletemember(@ApiParam(value = "member id to delete",required=true) @PathVariable("id") String username);


    @ApiOperation(value = "Find all member", nickname = "getAllMember", notes = "Returns all member", response = Member.class, tags={ "member", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Member.class),
        @ApiResponse(code = 404, message = "member not found") })
    @RequestMapping(value = "/member",
        produces = {"application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Member>> getAllMember();


    @ApiOperation(value = "Find member by ID", nickname = "getMemberById", notes = "Returns a single member", response = Member.class, tags={ "member", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Member.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "member not found") })
    @RequestMapping(value = "/member/{id}",
        produces = {  "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Member> getMemberById(@ApiParam(value = "ID of member to return",required=true) @PathVariable("id") String username);


    @ApiOperation(value = "Update an existing member", nickname = "updateMember", notes = "", tags={ "member", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Member not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/member",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateMember(@ApiParam(value = "Member object that needs to be update" ,required=true )  @Valid @RequestBody Member body);

}
