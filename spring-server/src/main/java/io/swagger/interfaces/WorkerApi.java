/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.16).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.interfaces;

import io.swagger.model.Worker;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-10-10T06:19:32.249Z")

@Api(value = "worker", description = "the worker API")
@RequestMapping()
public interface WorkerApi {

    @ApiOperation(value = "Add new worker information", nickname = "addWorker", notes = "", tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/worker",
        produces = {"application/json" },
        consumes = { "application/json"},
        method = RequestMethod.POST)
    ResponseEntity<Worker> addWorker(@ApiParam(value = "member object that needs to be added to the store" ,required=true )  @Valid @RequestBody Worker body);


    @ApiOperation(value = "Delete a worker", nickname = "deleteWorker", notes = "", tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "worker info not found") })
    @RequestMapping(value = "/worker/{id}",
        produces = {"application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteWorker(@ApiParam(value = "worker id to delete",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Find all worker", nickname = "getAllWorker", notes = "Returns all worker", response = Worker.class, tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Worker.class),
        @ApiResponse(code = 404, message = "member not found") })
    @RequestMapping(value = "/worker",
        produces = {"application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Worker>> getAllWorker();


    @ApiOperation(value = "Find member by ID", nickname = "getWorkerById", notes = "Returns a single member", response = Worker.class, tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Worker.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "worker not found") })
    @RequestMapping(value = "/worker/{id}",
        produces = {"application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Worker> getWorkerById(@ApiParam(value = "ID of worker to return",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "Update an existing worker information", nickname = "updateWorker", notes = "", tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Worker not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/worker",
        produces = { "application/json" },
        consumes = { "application/json"},
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateWorker(@ApiParam(value = "Worker object that needs to be update" ,required=true )  @Valid @RequestBody Worker body);

}
